---
import TextCounter from "@/components/TextCounter.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";
import type { OurExpertiseType } from "@/types";

interface Props {
  content: OurExpertiseType;
}

const {
  content: { enable, subtitle, title,image, content, funfacts, progressbar },
} = Astro.props;
---

{
  enable && (
    <section class="md:pt-28 pt-16 dark:bg-[#07031E]">
      <div class="container">
        <div class="row gy-4">
          <div class="col-12 text-center mb-5">
            {subtitle && (
              <span
                class="text-lg text-center dark:text-white text-text"
                set:html={markdownify(subtitle)}
              />
            )}
            {title && <h2 class="dark:text-white text-center" set:html={markdownify(title)} />}
            <div class="separator " />
          </div>
          <div class="lg:col-6">
            {content && <p class="dark:text-white" set:html={markdownify(content)} />}
            {funfacts && (
              <ul class="grid place-content-start gap-5 md:gap-7 mt-8 mb-6">
                {funfacts.map((funfact) => (
                  <li class="flex flex-col text-center md:text-start md:flex-row items-center gap-4">
                    {funfact && funfact.icon && (
                      <span
                        class={`${funfact.icon} h-[50px] xl:h-[70px] min-w-[50px] max-w-[50px] xl:min-w-[70px] xl:max-w-[70px] border border-border text-center leading-[50px] xl:leading-[70px] text-2xl xl:text-3xl text-primary inline-block rounded-full border-solid`}>
                        {funfact.icon && (
                          <DynamicIcon
                            className="inline-block"
                            icon={funfact.icon}
                          />
                        
                        )}
                        {funfact.title && (
                          <span
                            class="sr-only"
                            set:html={markdownify(funfact.title) || "icon"}
                          />
                        )}
                      </span>
                    )}
                    <div>
                      {funfact?.count && (
                        <div class="flex md:justify-start justify-center align-bottom ">
                        <h3 class="lg:h3 dark:text-white mb-1">
                          <TextCounter value={funfact.count} />
                        </h3>
                          <span class="dark:text-white">
                            %
                          </span></div>
                      )}
                      {funfact?.title && (
                        <p
                          class="opacity-80 dark:text-white"
                          set:html={markdownify(funfact.title)}
                        />
                      )}
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
          {progressbar && (
            <div class="lg:col-6 ml-auto grid place-items-center">
            <iframe class="w-full rounded-md h-full" src="https://www.youtube.com/embed/AGXI1V9wUq4?si=pRqSv7uoJDTgE3jw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" data-astro-source-file="E:/react-projects/devoptekai/src/layouts/components/ServiceCard.astro" data-astro-source-loc="35:10"></iframe>
            </div>
          )}
        </div>
      </div>
    </section>
  )
}
