---
import TwSizeIndicator from "@/components/TwSizeIndicator.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/partials/Footer.astro";
import Header from "@/partials/Header.astro";
import { AstroFont } from "astro-font";
import "@/styles/main.scss";

// font families
const pf = theme.fonts.font_family.primary;
const sf = theme.fonts.font_family.secondary;


let fontPrimary, fontSecondary;
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}
if (theme.fonts.font_family.secondary) {
  fontSecondary = theme.fonts.font_family.secondary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}

// types for frontmatters
export interface Props {
  title?: string;
  meta_title?: string;
  meta_description?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  canonical?: string;
}

// distructure frontmatters
const { title, meta_title, meta_description, description, image, noindex, canonical } =
  Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <!-- theme meta -->
    <meta name="msapplication-TileColor" content="#000000" />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- google font css -->
    <AstroFont
      config={[
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontPrimary!,
          fallback: "sans-serif",
          cssVariable: "font-primary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${pf}&display=swap`,
        },
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontSecondary!,
          fallback: "sans-serif",
          cssVariable: "font-secondary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${sf}&display=swap`,
        },
      ]}
    />

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- title -->
    <title>
      {plainify(meta_title ? meta_title : title ? title : config.site.title)}
    </title>

    <!-- canonical url -->
    {canonical && <link rel="canonical" href={canonical} item-prop="url" />}

    <!-- noindex robots -->
    {noindex && <meta name="robots" content="noindex,nofollow" />}

    <!-- meta-description -->
    <meta
      name="description"
      content={meta_description}
    />

    <!-- author from config.json -->
    <meta name="author" content={config.metadata.meta_author} />

    <!-- og-title -->
    <meta
      property="og:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title,
      )}
    />

    <!-- og-description -->
    <meta
      property="og:description"
      content={plainify(
        description ? description : config.metadata.meta_description,
      )}
    />
    <meta property="og:type" content="website" />
    <meta
      property="og:url"
      content={`${config.site.base_url}/${Astro.url.pathname.replace("/", "")}`}
    />

    <!-- twitter-title -->
    <meta
      name="twitter:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title,
      )}
    />

    <!-- twitter-description -->
    <meta
      name="twitter:description"
      content={plainify(
        description ? description : config.metadata.meta_description,
      )}
    />

    <!-- og-image -->
    <meta
      property="og:image"
      content={`${config.site.base_url}${
        image ? image : config.metadata.meta_image
      }`}
    />

    <!-- twitter-image -->
    <meta
      name="twitter:image"
      content={`${config.site.base_url}${
        image ? image : config.metadata.meta_image
      }`}
    />
    <meta name="twitter:card" content="summary_large_image" />
    <script>
      (function() {
        // Function to update the theme based on localStorage or system preference
        function updateTheme() {
          const savedTheme = localStorage.getItem('theme');
          if (savedTheme) {
            document.documentElement.classList.add(savedTheme);
            updateToggle(savedTheme);
          } else {
            const userPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            if (userPrefersDark) {
              document.documentElement.classList.add('dark');
              localStorage.setItem('theme', 'dark');
              updateToggle('dark');
            } else {
              document.documentElement.classList.add('light');
              localStorage.setItem('theme', 'light');
              updateToggle('light');
            }
          }
        }
    
        // Function to update the toggle button appearance based on theme
        function updateToggle(theme) {
          const toggleCircle = document.getElementById('toggle-circle');
          const sunIcon = document.getElementById('sun-icon');
          const moonIcon = document.getElementById('moon-icon');
          if (theme === 'dark') {
            toggleCircle.style.transform = 'translateX(260%)';
            moonIcon.classList.add('inline-block');
            moonIcon.classList.remove('hidden');
            sunIcon.classList.add('hidden');
            sunIcon.classList.remove('inline-block');
          } else {
            toggleCircle.style.transform = 'translateX(30%)';
            moonIcon.classList.add('hidden');
            moonIcon.classList.remove('inline-block');
            sunIcon.classList.add('inline-block');
            sunIcon.classList.remove('hidden');
          }
        }
    
        // Function to toggle theme
        function toggleTheme() {
          const html = document.documentElement;
          if (html.classList.contains('dark')) {
            html.classList.remove('dark');
            html.classList.add('light');
            localStorage.setItem('theme', 'light');
            updateToggle('light');
          } else {
            html.classList.remove('light');
            html.classList.add('dark');
            localStorage.setItem('theme', 'dark');
            updateToggle('dark');
          }
        }
    
        // Initialize theme and toggle button on page load
        document.addEventListener('DOMContentLoaded', function() {
          updateTheme();
          document.getElementById('theme-toggle').addEventListener('click', toggleTheme);
        });
      })();
      </script>
  </head>
  <body>
    <!-- <div class="fixed z-20 bg-white rounded-full p-4 shadow-md animate-bounce bottom-10 right-10">
      <a href="#">
        <img class="w-14" src="/images/logo/chatbot.png" alt="">
      </a>
    </div> -->
    <TwSizeIndicator />
    <Header />
    <main id="main-content">
      <slot />
    </main>
    <Footer />
   
    </script>
  </body></html
>
