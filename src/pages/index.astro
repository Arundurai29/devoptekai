---
import Base from "@/layouts/Base.astro";
import { getEntry } from "astro:content";
import { getSinglePage } from "@/lib/contentParser.astro";
import bgImageMod from "@/lib/utils/bgImageMod";
import { markdownify } from "@/lib/utils/textConverter";
import Testimonial from "@/partials/Testimonial.astro";
import ServiceCard from "@/components/ServiceCard.astro";
import BlogCard from "@/components/BlogCard.astro";
import ProjectCard from "@/components/ProjectCard.astro";
import OurExpertise from "@/partials/OurExpertise.astro";
import CallToAction from "@/partials/CallToAction.astro";
import MissionVision from "@/partials/MissionVision.astro";
import MissionVision1 from "@/partials/MissionVision1.astro";
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";

import type {
  CallToActionType,
  MissionVisionType,
  OurExpertiseType,
  TestimonialType,
} from "@/types";

const missionVisionContent = (await getEntry("sections", "ragworks"))
  .data as MissionVisionType;
const missionVisionContent1 = (await getEntry("sections", "docusage"))
  .data as MissionVisionType;
  const missionVisionContent2 = (await getEntry("sections", "webconcierge"))
  .data as MissionVisionType;
const ourExpertiseContent = (await getEntry("sections", "our-expertise"))
  .data as OurExpertiseType;
const callToActionContent = (await getEntry("sections", "call-to-action"))
  .data as CallToActionType;
const testimonialContent = (await getEntry("sections", "testimonial"))
  .data as TestimonialType;

const BLOG_FOLDER = "blog";
const blogCollection = await getSinglePage(BLOG_FOLDER);
const servicesCollection = await getSinglePage("services");
const projectsCollection = await getSinglePage("projects");

const {
  data: {
    banner_slider,
    service,
    about,
    project,
    mission,
    promo_video,
    our_expertise,
    blog,
    testimonial,
    call_to_action,
    clients_logo_slider,
  },
} = await getEntry("homepage", "-index");

// Section Background Images
const aboutBgImage = await bgImageMod(about?.bg_image!);
const promoVideoBgImage = await bgImageMod(promo_video?.bg_image!);
---

<Base>
  {
    banner_slider?.enable && (
      <section>
        <div class="banner-slider swiper relative">
          <div class="swiper-wrapper ">
            {banner_slider.slider_item.map((slider, index) => {
              let { title, subtitle, content, bg_image, button } = slider;

              return (
                <div class="swiper-slide banner-slider-item py-36 anim">
                  <div class="container">
                    <div class="row items-center">
                      <div class="col-lg-12">
                        <div class="hero-content relative z-20">
                          {subtitle && (
                            <span
                              class={`h4 uppercase font-normal text-white mb-0 block anim-item ${
                                index === 0
                                  ? "anim-slide-right anim-delay-1"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-1"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-1"
                                      : "anim-slide-bottom anim-delay-1"
                              }`}
                              set:html={markdownify(subtitle)}
                            />
                          )}
                          {title && (
                            <h1
                              class={`text-5xl/tight text-white  lg:text-5xl/tight font-semibold sm:font-bold mb-6 anim-item ${
                                index === 0
                                  ? "anim-slide-right anim-delay-3"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-3"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-3"
                                      : "anim-slide-bottom anim-delay-3"
                              }`}
                              set:html={markdownify(title)}
                            />
                          )}
                          {content && (
                            <p
                              class={`text-white anim-item ${
                                index === 0
                                  ? "anim-slide-right anim-delay-6"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-6"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-6"
                                      : "anim-slide-bottom anim-delay-6"
                              }`}
                              set:html={markdownify(content)}
                            />
                          )}
                          {button?.enable && (
                            <div
                              class={`anim-item  relative w-fit mt-12 ${
                                index === 0
                                  ? "anim-slide-right anim-delay-8"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-8"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-8"
                                      : "anim-slide-bottom anim-delay-8"
                              }`}>
                              <a
                                class="btn text-white btn-outline-dark uppercase"
                                href={button.link}
                                set:html={button.label}
                              />
                            </div>
                           
                          )}
                        </div>
                        {bg_image && (
                          <ImageMod
                            src={bg_image}
                            width={1550}
                            height={600}
                            loading="eager"
                            alt={title || "banner image"}
                            class="z-10 absolute left-0 top-0 w-full h-full object-cover"
                          />
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
          <div class="swiper-navigation">
            <button
              type="button"
              class="prev-arrow"
              title="prev navigation button">
              <span class="sr-only" set:html="see previous slide" />
              <DynamicIcon className="inline-block" icon="TfiArrowLeft" />
            </button>
            <button
              type="button"
              class="next-arrow"
              title="next navigation button">
              <span class="sr-only" set:html="see next slide" />
              <DynamicIcon className="inline-block" icon="TfiArrowRight" />
            </button>
          </div>
        </div>
        
        <div class="container">
          <div class="swiper banner-nav-slider">
            <div class="swiper-wrapper flex justify-center	 items-center">
              {banner_slider.slider_item.map((slider) => {
                let { paginationIcon, paginationName } = slider;

                return (
                  <div class="swiper-slide">
                    <button type="button" title={paginationName}>
                      {paginationIcon && (
                        <DynamicIcon
                          className="inline-block"
                          icon={paginationIcon}
                        />
                      )}
                      <span set:html={paginationName} />
                    </button>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </section>
    )
  }

<style>
  .btn-outline-dark{
        border-color: rgb(255 255 255) !important;
  }
</style>

  <!-- {
    about?.enable && (
      <section
        class="section-sm lg:section overlay bg-cover bg-no-repeat"
        style={{ backgroundImage: `url(${aboutBgImage})` }}>
        <div class="container overlay-content">
          <div class="row">
            <div class="lg:col-6 ml-auto">
              <div class="bg-secondary px-10 py-12 rounded-md">
                {about.title && (
                  <h2
                    class="text-white h3"
                    set:html={markdownify(about.title)}
                  />
                )}
                <div class="separator separator-secondary" />
                {about.content && (
                  <p
                    class="my-8 text-white"
                    set:html={markdownify(about.content)}
                  />
                )}
                {about.bulletPoint && (
                  <ul class="sm:columns-2 space-y-2 mb-6">
                    {about.bulletPoint.map((point: string) => (
                      <li class="text-white" set:html={markdownify(point)}>
                        <DynamicIcon
                          className="inline-block text-primary me-2"
                          icon="TfiArrowCircleRight"
                        />
                      </li>
                    ))}
                  </ul>
                )}
                {about.button?.enable && about.button.label && (
                  <a
                    href={about.button.link}
                    class="btn btn-primary"
                    set:html={markdownify(about.button.label)}
                  />
                )}
              </div>
            </div>
          </div>
        </div>
      </section>
    )
  } -->

  <!-- {our_expertise?.enable && <OurExpertise content={ourExpertiseContent} />} -->

  <!-- {
    project?.enable && (
      <section class="section-sm overflow-hidden bg-theme-light">
        <div class="row gy-4">
          <div class="col-12 text-center mb-5">
            {project.subtitle && (
              <span
                class="text-lg text-text"
                set:html={markdownify(project.subtitle)}
              />
            )}
            {project.title && <h2 set:html={markdownify(project.title)} />}
            <div class="separator after:shadow-theme-light" />
          </div>
          <div class="col-12">
            <div class="work-slider swiper">
              <div class="swiper-wrapper">
                {projectsCollection.map((project) => {
                  return (
                    <div class="swiper-slide">
                      <ProjectCard content={project} />
                    </div>
                  );
                })}
              </div>
            </div>
            <div class="swiper-pagination pagination-rounded" />
          </div>
        </div>
      </section>
    )
  } -->
  
  {mission?.enable && <MissionVision content={missionVisionContent} />}
  {mission?.enable && <MissionVision1 content={missionVisionContent1} />}
  {mission?.enable && <MissionVision content={missionVisionContent2} />}


  {
    service?.enable && (
      <section class="section pt-0">
        <div class="container">
          <div class="row gy-4">
            <div class="col-12 text-center mb-5">
              {service.subtitle && (
                <span
                  class="text-lg text-text"
                  set:html={markdownify(service.subtitle)}
                />
              )}
              {service.title && <h2 set:html={markdownify(service.title)} />}
              <div class="separator" />
            </div>
            {servicesCollection.slice(0, 4).map((service) => {
              return (
                <div class="md:col-6 xl:col-3">
                  <ServiceCard content={service} />
                </div>
              );
            })}
          </div>
        </div>
      </section>
    )
  }

{call_to_action?.enable && <CallToAction content={callToActionContent} />}

  {testimonial?.enable && <Testimonial content={testimonialContent} />}
 

  <!-- {
    blog?.enable && (
      <section class="section bg-theme-light">
        <div class="container">
          <div class="row gy-4">
            <div class="col-12 text-center mb-5">
              {blog.subtitle && (
                <span
                  class="text-lg text-text"
                  set:html={markdownify(blog.subtitle)}
                />
              )}
              {blog.title && <h2 set:html={markdownify(blog.title)} />}
              <div class="separator after:shadow-theme-light" />
            </div>

            {blogCollection.slice(0, 3).map((post) => {
              return (
                <div class="md:col-6 xl:col-4">
                  <BlogCard content={post} />
                </div>
              );
            })}
          </div>
        </div>
      </section>
    )
  } -->

  {
    clients_logo_slider?.enable && (
      <section class="bg-white py-4">
        <div class="container">
          <div class="client-logo-slider swiper self-center">
            <div class="swiper-wrapper justify-center items-center">
              {clients_logo_slider.clientLogos &&
                clients_logo_slider.clientLogos.map((item) => {
                  if (!item?.logo) return null;

                  const { logo, link } = item;

                  return (
                    <div class="swiper-slide">
                      {link || link === "#?" ? (
                        <a
                          href={link}
                          target="_blank"
                          class="text-center block outline-0 py-3 px-2">
                          <ImageMod
                            src={logo}
                            width={140}
                            height={50}
                            alt="client-logo"
                          />
                        </a>
                      ) : (
                        <span class="text-center block outline-0 py-3 px-2">
                          <ImageMod
                            src={logo}
                            width={140}
                            height={50}
                            alt="client-logo"
                          />
                        </span>
                      )}
                    </div>
                  );
                })}
            </div>
          </div>
        </div>
      </section>
    )
  }

  <div
    class="modal"
    tabindex="-1"
    id="videoModal"
    role="dialog"
    aria-label="video modal"
    aria-hidden="false">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <button data-dismiss="modal" class="btn-close" title="close modal">
          <DynamicIcon className="inline-block" icon="TfiClose" />
        </button>
        <div class="modal-body">
          <iframe class="aspect-video w-full" src=""></iframe>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Select all elements with the attribute "data-toggle" set to "modal"
    const modalButtons: NodeListOf<HTMLElement> = document.querySelectorAll(
      "[data-toggle='modal']",
    );
    const body: HTMLElement = document.body; // Reference to the body element

    // Function to add a modal backdrop to the body
    const addModalBackdrop = (): void => {
      const backdrop: HTMLDivElement = document.createElement("div");
      backdrop.className = "modal-backdrop fade show";
      backdrop.id = "modalBackdrop";
      body.appendChild(backdrop);
    };

    // Function to get a modal element based on the provided target selector
    const getModal = (target: string): HTMLElement | null =>
      document.querySelector(target);

    // Function to show a modal when a corresponding button is clicked
    const showModal = (button: HTMLElement): void => {
      // Get the target modal ID from the button's data-target attribute
      const targetModalId: string = button.getAttribute("data-target") ?? "";
      const modal: HTMLElement | null = getModal(targetModalId);

      if (modal) {
        // Add a modal backdrop and update body styles
        addModalBackdrop();
        body.classList.add("modal-open");

        // Function to close the modal
        const closeModalHandler = (): void => closeModal(modal);
        document
          .querySelector(".modal-backdrop")
          ?.addEventListener("click", closeModalHandler);

        // Show the modal and set the iframe source if available
        modal.classList.add("show");
        const iframe: HTMLIFrameElement | null = modal.querySelector("iframe");
        if (iframe) {
          const dataSrc: string | null = button.getAttribute("data-src");
          iframe.src = dataSrc as string; // Type assertion
        }

        // Calculate scrollbar width and adjust body styles
        const scrollbarWidth: number =
          window.innerWidth - document.documentElement.clientWidth;
        body.style.overflow = "hidden";
        body.style.paddingRight = `${scrollbarWidth}px`;
        modal.style.paddingRight = `${scrollbarWidth}px`;

        // Attach click event handlers to modal close buttons
        const modalCloseBtns: NodeListOf<HTMLElement> =
          modal.querySelectorAll("[data-dismiss]");
        modalCloseBtns.forEach((btn) =>
          btn.addEventListener("click", closeModalHandler),
        );
      }
    };

    // Function to close the modal and remove the backdrop
    const closeModal = (modal: HTMLElement): void => {
      const modalBackdrop: HTMLElement | null =
        document.querySelector(".modal-backdrop");

      if (modal) {
        // Reset iframe src when the modal is closed
        const iframe: HTMLIFrameElement | null = modal.querySelector("iframe");
        if (iframe) iframe.src = "";

        // Hide the modal and reset body styles
        modal.classList.remove("show");
        body.style.overflow = "";
        body.style.paddingRight = "";
        modal.style.paddingRight = "";
        modalBackdrop && modalBackdrop.remove(); // Remove modal backdrop if exists
      }
    };

    // Attach click event handlers to all modal buttons
    modalButtons.forEach((button) => {
      button.addEventListener("click", () => showModal(button));
    });
  </script>
</Base>
