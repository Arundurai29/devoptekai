---
import Base from "@/layouts/Base.astro";
import { getEntry } from "astro:content";
import { getSinglePage } from "@/lib/contentParser.astro";
import bgImageMod from "@/lib/utils/bgImageMod";
import { markdownify } from "@/lib/utils/textConverter";
import Testimonial from "@/partials/Testimonial.astro";
import ServiceCard from "@/components/ServiceCard.astro";
import BlogCard from "@/components/BlogCard.astro";
import ProjectCard from "@/components/ProjectCard.astro";
import OurExpertise from "@/partials/OurExpertise.astro";
import CallToAction from "@/partials/CallToAction.astro";
import MissionVision from "@/partials/MissionVision.astro";
import MissionVision1 from "@/partials/MissionVision1.astro";
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import Swiper from 'swiper';
import config from "@/config/config.json";

import type {
  CallToActionType,
  MissionVisionType,
  OurExpertiseType,
  TestimonialType,
} from "@/types";

const missionVisionContent = (await getEntry("sections", "ragworks"))
  .data as MissionVisionType;
const missionVisionContent1 = (await getEntry("sections", "docusage"))
  .data as MissionVisionType;
  const missionVisionContent2 = (await getEntry("sections", "webconcierge"))
  .data as MissionVisionType;
  const missionVisionContent3 = (await getEntry("sections", "offgridai"))
  .data as MissionVisionType;
const ourExpertiseContent = (await getEntry("sections", "our-expertise"))
  .data as OurExpertiseType;
const callToActionContent = (await getEntry("sections", "call-to-action"))
  .data as CallToActionType;
const testimonialContent = (await getEntry("sections", "testimonial"))
  .data as TestimonialType;
  const { contact_form_action }: { contact_form_action: string } = config.params;
const BLOG_FOLDER = "blog";
const blogCollection = await getSinglePage(BLOG_FOLDER);
const servicesCollection = await getSinglePage("services");
const projectsCollection = await getSinglePage("projects");

const {
  data: {
    banner_slider,
    service,
    about,
    project,
    mission,
    promo_video,
    our_expertise,
    blog,
    lifecycle,
    testimonial,
    call_to_action,
    clients_logo_slider,
  },
} = await getEntry("homepage", "-index");

// Section Background Images
const aboutBgImage = await bgImageMod(about?.bg_image!);
const promoVideoBgImage = await bgImageMod(promo_video?.bg_image!);



---

<Base>
  {
    banner_slider?.enable && (
      <section>
        <div class="banner-slider swiper relative">
          <div class="swiper-wrapper ">
            {banner_slider.slider_item.map((slider, index) => {
              let { title, subtitle, content, bg_image, button } = slider;
              const bgImageUrls = bg_image.split(':');
const desktopImageUrl = bgImageUrls[0].trim();
const mobileImageUrl = bgImageUrls[1] ? bgImageUrls[1].trim() : desktopImageUrl;
const isValidPath = (path: string) => {
  const supportedFormats = ["jpeg", "jpg", "png", "webp"]; // Add supported formats here
  const format = path.split(".").pop()?.toLowerCase(); // Get the file extension

  return format && supportedFormats.includes(format);
};
              return (
                <div class="swiper-slide banner-slider-item lg:py-36 pt-10 pb-60 anim">
                  <div class="container">
                    <div class="row items-center">
                      <div class="col-lg-12">
                        <div class="hero-content relative z-20">
                          {subtitle && (
                            <span
                              class={`h4 uppercase font-normal text-white mb-0 block anim-item ${
                                index === 0
                                  ? "anim-slide-right anim-delay-1"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-1"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-1"
                                      : "anim-slide-bottom anim-delay-1"
                              }`}
                              set:html={markdownify(subtitle)}
                            />
                          )}
                          {title && (
                            <h1
                              class={`text-5xl/tight text-white  lg:text-5xl/tight font-semibold sm:font-bold mb-6 anim-item ${
                                index === 0
                                  ? "anim-slide-right anim-delay-3"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-3"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-3"
                                      : "anim-slide-bottom anim-delay-3"
                              }`}
                              set:html={markdownify(title)}
                            />
                          )}
                          {/* {content && (
                            <p
                              class={`text-white anim-item ${
                                index === 0
                                  ? "anim-slide-right anim-delay-6"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-6"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-6"
                                      : "anim-slide-bottom anim-delay-6"
                              }`}
                              set:html={markdownify(content)}
                            />
                          )} */}
                          {button?.enable && (
                            <div
                              class={`anim-item  relative w-fit mt-12 ${
                                index === 0
                                  ? "anim-slide-right anim-delay-8"
                                  : index === 1
                                    ? "anim-slide-left anim-delay-8"
                                    : index === 2
                                      ? "anim-slide-top anim-delay-8"
                                      : "anim-slide-bottom anim-delay-8"
                              }`}>
                              <a
                                class="btn text-white btn-outline-dark uppercase"
                                href={button.link}
                                set:html={button.label}
                              />
                            </div>
                           
                          )}
                        </div>
                        {desktopImageUrl && (
                          
    <div class="hidden md:block">
       {isValidPath(desktopImageUrl) ? (
       <img
      src={desktopImageUrl}
      alt={title || "banner image"}
      width={1550}
      height={600}
      loading="eager"
      class="z-10 absolute left-0 top-0 w-full h-full object-cover"
    />
    ) : (
      <img
        src={desktopImageUrl}
        alt={title || "banner image"}
        width={1550}
        height={600}
        loading="eager"
        class="z-10 absolute left-0 top-0 w-full h-full object-cover"
      />
    )}
    </div>

 
    <div class="block md:hidden">
      <ImageMod
        src={mobileImageUrl}
        width={800}
        height={800}
        loading="eager"
        alt={title || "mobile banner image"}
        class="z-10 absolute left-0 top-0 w-full h-full object-cover"
      />
    </div>
)}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
          <div class="swiper-navigation">
            <button
              type="button"
              class="prev-arrow"
              title="prev navigation button">
              <span class="sr-only" set:html="see previous slide" />
              <DynamicIcon className="inline-block" icon="TfiArrowLeft" />
            </button>
            <button
              type="button"
              class="next-arrow"
              title="next navigation button">
              <span class="sr-only" set:html="see next slide" />
              <DynamicIcon className="inline-block" icon="TfiArrowRight" />
            </button>
          </div>
        </div>
        
        <div class="container">
          <div class="swiper banner-nav-slider">
            <div class="swiper-wrapper flex justify-center	 items-center">
              {banner_slider.slider_item.map((slider) => {
                let { paginationIcon, paginationName } = slider;

                return (
                  <div class="swiper-slide">
                    <button type="button" title={paginationName}>
                      {paginationIcon && (
                        <DynamicIcon
                          className="inline-block"
                          icon={paginationIcon}
                        />
                      )}
                      <span set:html={paginationName} />
                    </button>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </section>
    )
  }

<style>
  .btn-outline-dark{
        border-color: rgb(255 255 255) !important;
  }
</style>

  <!-- {
    about?.enable && (
      <section
        class="section-sm lg:section overlay bg-cover bg-no-repeat"
        style={{ backgroundImage: `url(${aboutBgImage})` }}>
        <div class="container overlay-content">
          <div class="row">
            <div class="lg:col-6 ml-auto">
              <div class="bg-secondary px-10 py-12 rounded-md">
                {about.title && (
                  <h2
                    class="text-white h3"
                    set:html={markdownify(about.title)}
                  />
                )}
                <div class="separator separator-secondary" />
                {about.content && (
                  <p
                    class="my-8 text-white"
                    set:html={markdownify(about.content)}
                  />
                )}
                {about.bulletPoint && (
                  <ul class="sm:columns-2 space-y-2 mb-6">
                    {about.bulletPoint.map((point: string) => (
                      <li class="text-white" set:html={markdownify(point)}>
                        <DynamicIcon
                          className="inline-block text-primary me-2"
                          icon="TfiArrowCircleRight"
                        />
                      </li>
                    ))}
                  </ul>
                )}
                {about.button?.enable && about.button.label && (
                  <a
                    href={about.button.link}
                    class="btn btn-primary"
                    set:html={markdownify(about.button.label)}
                  />
                )}
              </div>
            </div>
          </div>
        </div>
      </section>
    )
  } -->

  <!-- {our_expertise?.enable && <OurExpertise content={ourExpertiseContent} />} -->

  <!-- {
    project?.enable && (
      <section class="section-sm overflow-hidden bg-theme-light">
        <div class="row gy-4">
          <div class="col-12 text-center mb-5">
            {project.subtitle && (
              <span
                class="text-lg text-text"
                set:html={markdownify(project.subtitle)}
              />
            )}
            {project.title && <h2 set:html={markdownify(project.title)} />}
            <div class="separator after:shadow-theme-light" />
          </div>
          <div class="col-12">
            <div class="work-slider swiper">
              <div class="swiper-wrapper">
                {projectsCollection.map((project) => {
                  return (
                    <div class="swiper-slide">
                      <ProjectCard content={project} />
                    </div>
                  );
                })}
              </div>
            </div>
            <div class="swiper-pagination pagination-rounded" />
          </div>
        </div>
      </section>
    )
  } -->

  {
    clients_logo_slider?.enable && (
      <section class="bg-white dark:bg-[#07031E] pt-28">
        <h2 class="text-center text-black dark:text-white"> Trusted by Industry Leaders</h2>
        <div class="container">
          <div class="client-logo-slider swiper self-center">
            <div class="swiper-wrapper lg:justify-center justify-left items-center">
              {clients_logo_slider.clientLogos &&
                clients_logo_slider.clientLogos.map((item) => {
                  if (!item?.logo) return null;

                  const { logo, link } = item;

                  return (
                    <div class="swiper-slide">
                      {link || link === "#?" ? (
                        <a
                          href={link}
                          target="_blank"
                          class="text-center block outline-0 py-3 px-2">
                          <ImageMod
                            src={logo}
                            width={140}
                            height={50}
                            alt="client-logo"
                          />
                        </a>
                      ) : (
                        <span class="text-center block outline-0 py-3 px-2">
                          <ImageMod
                            src={logo}
                            width={140}
                            height={50}
                            alt="client-logo"
                          />
                        </span>
                      )}
                    </div>
                  );
                })}
            </div>
          </div>
        </div>
      </section>
    )
  }
  

  {
    service?.enable && (
      <section class="section pb-0 bg-white dark:bg-[#07031E]">
        <div class="container">
          <div class="row gy-4">
            <div class="col-12 text-center mb-5">
              {service.subtitle && (
                <span
                  class="text-lg text-text dark:text-white"
                  set:html={markdownify(service.subtitle)}
                />
              )}
              {service.title && <h2 class="text-dark dark:text-white" set:html={markdownify(service.title)} />}
              <div class="separator" />
            </div>
            {servicesCollection.slice(0, 4).map((service) => {
              return (
                <div class="md:col-6 xl:col-3">
                  <ServiceCard content={service} />
                </div>
              );
            })}
          </div>
        </div>
      </section>
    )
  }

{mission?.enable && <MissionVision content={missionVisionContent} />}
{mission?.enable && <MissionVision1 content={missionVisionContent1} />}
{mission?.enable && <MissionVision content={missionVisionContent2} />}
{mission?.enable && <MissionVision1 content={missionVisionContent3} />}

{call_to_action?.enable && <CallToAction content={callToActionContent} />}

{
  our_expertise?.enable && (
    <section class="section pb-0 bg-white dark:bg-[#07031E]">
      <div class="container">
        <div class="row gy-4">
          <div class="col-12 text-center mb-5">
            
            {our_expertise.title && <h2 class="text-dark dark:text-white" set:html={markdownify(our_expertise.title)} />}
            {our_expertise.content && <p class="text-dark dark:text-white" set:html={markdownify(our_expertise.content)} />}
            <div class="separator" />
          </div>

        <div class="md:col-4 ">
          <div class="shadow-md grid place-content-center h-full dark:bg-[#222C40] rounded-sm p-5">
         <h3 class="text-dark text-2xl dark:text-white" >
          Planning and Strategy
         </h3>
            <p class=" dark:text-white">
              Outline the initial steps of project planning and strategy development, including requirements gathering, goal setting, and roadmap creation.
            </p>
          </div>
      </div>
      <div class="md:col-4">
          <div class="shadow-md  dark:bg-[#222C40] rounded-sm p-5">
         <h3 class="text-dark text-2xl dark:text-white" >
          Implementation and Development
         </h3>
            <p class=" dark:text-white">
              Describe the development and implementation phase, including design, coding, testing, and deployment activities.
            </p>
          </div>
      </div>
      <div class="md:col-4">
          <div class="shadow-md h-full place-content-center dark:bg-[#222C40] rounded-sm p-5">
         <h3 class="text-dark text-2xl dark:text-white" >
          Monitoring and Optimization
         </h3>
            <p class=" dark:text-white">
              Explain the ongoing monitoring and optimization phase, focusing on performance tracking, feedback collection, and continuous improvement.
            </p>
          </div>
      </div>
        </div>
      </div>
    </section>
  )
}

  {testimonial?.enable && <Testimonial content={testimonialContent} />}
 
  <section class="section bg-white dark:bg-[#07031E]">
    <div class="container">
      <div class="row">
        <div class="lg:col-5 md:col-5 grid place-content-center">
          <h2 class="h2 mb-8 dark:text-white" set:html="Contact Us" />

          <ul
            class="pl-0"
            data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
            data-astro-source-loc="42:32"
          >
            <li
              class="flex mb-8 dark:text-white"
              data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
              data-astro-source-loc="47:43"
            >
              <span
                class="mr-4 TfiMobile h-[50px] xl:h-[70px] min-w-[50px] max-w-[50px] xl:min-w-[70px] xl:max-w-[70px] border border-border text-center leading-[50px] xl:leading-[70px] text-2xl xl:text-2xl text-primary inline-block rounded-full border-solid"
                data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                data-astro-source-loc="51:247"
              >
                <span
                  class="sr-only"
                  data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                  data-astro-source-loc="52:26">mobile</span
                >
                <svg
                  stroke="currentColor"
                  fill="currentColor"
                  stroke-width="0"
                  version="1.1"
                  viewBox="0 0 17 17"
                  class="inline-block"
                  height="1em"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                  ><g></g><path
                    d="M12.5 0h-8c-0.827 0-1.5 0.673-1.5 1.5v14c0 0.827 0.673 1.5 1.5 1.5h8c0.827 0 1.5-0.673 1.5-1.5v-14c0-0.827-0.673-1.5-1.5-1.5zM4.5 1h8c0.276 0 0.5 0.224 0.5 0.5v1.5h-9v-1.5c0-0.276 0.224-0.5 0.5-0.5zM13 4v8h-9v-8h9zM12.5 16h-8c-0.276 0-0.5-0.224-0.5-0.5v-2.5h9v2.5c0 0.276-0.224 0.5-0.5 0.5zM9 14.5c0 0.276-0.224 0.5-0.5 0.5s-0.5-0.224-0.5-0.5 0.224-0.5 0.5-0.5 0.5 0.224 0.5 0.5z"
                  ></path></svg
                >
              </span>
              <div
                class="self-center font-primary"
                data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                data-astro-source-loc="55:61"
              >
                <div
                  class="text-dark dark:text-white"
                  data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                  data-astro-source-loc="56:26"
                >
                  +1 (226)&nbsp;246-7055
                </div>
              </div>
            </li><li
              class="flex mb-8"
              data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
              data-astro-source-loc="47:43"
            >
              <span
                class="mr-4 TfiEmail h-[50px] xl:h-[70px] min-w-[50px] max-w-[50px] xl:min-w-[70px] xl:max-w-[70px] border border-border text-center leading-[50px] xl:leading-[70px] text-2xl xl:text-2xl text-primary inline-block rounded-full border-solid"
                data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                data-astro-source-loc="51:247"
              >
                <span
                  class="sr-only"
                  data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                  data-astro-source-loc="52:26">mail</span
                >
                <svg
                  stroke="currentColor"
                  fill="currentColor"
                  stroke-width="0"
                  version="1.1"
                  viewBox="0 0 17 17"
                  class="inline-block"
                  height="1em"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                  ><g></g><path
                    d="M0 2v13h17v-13h-17zM8.494 9.817l-6.896-6.817h13.82l-6.924 6.817zM5.755 8.516l-4.755 4.682v-9.383l4.755 4.701zM6.466 9.219l2.026 2.003 1.996-1.966 4.8 4.744h-13.677l4.855-4.781zM11.201 8.555l4.799-4.725v9.467l-4.799-4.742z"
                  ></path></svg
                >
              </span>
              <div
                class="self-center font-primary"
                data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                data-astro-source-loc="55:61"
              >
                <div
                  class="text-dark dark:text-white"
                  data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                  data-astro-source-loc="56:26"
                >
                  <a href="mailto:admin@devoptek.ai">admin@devoptek.ai</a>
                </div>
              </div>
            </li><li
              class="flex mb-8"
              data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
              data-astro-source-loc="47:43"
            >
              <span
                class="mr-4 TfiMapAlt h-[50px] xl:h-[70px] min-w-[50px] max-w-[50px] xl:min-w-[70px] xl:max-w-[70px] border border-border text-center leading-[50px] xl:leading-[70px] text-2xl xl:text-2xl text-primary inline-block rounded-full border-solid"
                data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                data-astro-source-loc="51:247"
              >
                <span
                  class="sr-only"
                  data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                  data-astro-source-loc="52:26">location</span
                >
                <svg
                  stroke="currentColor"
                  fill="currentColor"
                  stroke-width="0"
                  version="1.1"
                  viewBox="0 0 17 17"
                  class="inline-block"
                  height="1em"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                  ><g></g><path
                    d="M15 4v0.069l-0.013-0.058-1.015 0.221c-0.139-1.803-1.634-3.232-3.472-3.232-1.841 0-3.339 1.435-3.474 3.242l-1.026-0.223v-0.019h-6v11h5.348l5.196 1.479 5.456-1.605v-10.874h-1zM10.5 2c1.379 0 2.5 1.122 2.5 2.5 0 1.806-1.719 4.209-2.5 5.207-0.781-0.998-2.5-3.401-2.5-5.207 0-1.378 1.121-2.5 2.5-2.5zM6 5.042l1.081 0.235c0.412 2.269 2.406 4.788 2.919 5.406v4.602l-4-1.139v-9.104zM1 5h4v9.017l-4-0.017v-9zM11 15.303v-4.621c0.514-0.619 2.513-3.145 2.921-5.416l1.079-0.234v9.094l-4 1.177zM11.858 4.583c0-0.749-0.609-1.358-1.358-1.358s-1.358 0.609-1.358 1.358 0.609 1.359 1.358 1.359 1.358-0.609 1.358-1.359zM10.142 4.583c0-0.198 0.161-0.358 0.358-0.358s0.358 0.161 0.358 0.358-0.161 0.359-0.358 0.359-0.358-0.161-0.358-0.359z"
                  ></path></svg
                >
              </span>
              <div
                class="self-center font-primary"
                data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                data-astro-source-loc="55:61"
              >
                <div
                  class="text-dark dark:text-white"
                  data-astro-source-file="E:/react-projects/devoptekai/src/pages/contact.astro"
                  data-astro-source-loc="56:26"
                >
                  67, Zieman Crescent, Cambridge, ON
                </div>
              </div>
            </li>
          </ul>
        </div>
        <div class="lg:col-7 md:col-7">
          <div class="p-5 md:p-10 rounded shadow">
            <form method="post" action={contact_form_action} class="row g-3">
              <div class="lg:col-6">
                <input
                  type="text"
                  name="name"
                  id="name"
                  class="form-input"
                  placeholder="Name"
                  required
                />
              </div>
              <div class="lg:col-6">
                <input
                  type="email"
                  class="form-input"
                  name="email"
                  id="email"
                  placeholder="Email Address"
                  required
                />
              </div>
              <div class="lg:col-6 flex items-start">
                <input
                  type="tel"
                  class="form-input"
                  name="phone"
                  id="phone"
                  placeholder="Phone No"
                  required
                />
              </div>
              <div class="lg:col-6">
                <input
                  type="text"
                  name="company-name"
                  id="company-name"
                  class="form-input"
                  placeholder="Company Name"
                  required
                />
              </div>

              <div class="lg:col-12">
                <textarea
                  class="form-input"
                  name="message"
                  id="message"
                  placeholder="Your Message Here..."
                  required
                  style="height: 150px;"></textarea>
              </div>
              <div class="lg:col-12">
                <button class="btn btn-primary" type="submit">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </section>
  <!-- {
    blog?.enable && (
      <section class="section bg-theme-light">
        <div class="container">
          <div class="row gy-4">
            <div class="col-12 text-center mb-5">
              {blog.subtitle && (
                <span
                  class="text-lg text-text"
                  set:html={markdownify(blog.subtitle)}
                />
              )}
              {blog.title && <h2 set:html={markdownify(blog.title)} />}
              <div class="separator after:shadow-theme-light" />
            </div>

            {blogCollection.slice(0, 3).map((post) => {
              return (
                <div class="md:col-6 xl:col-4">
                  <BlogCard content={post} />
                </div>
              );
            })}
          </div>
        </div>
      </section>
    )
  } -->

 

  <div
    class="modal"
    tabindex="-1"
    id="videoModal"
    role="dialog"
    aria-label="video modal"
    aria-hidden="false">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <button data-dismiss="modal" class="btn-close" title="close modal">
          <DynamicIcon className="inline-block" icon="TfiClose" />
        </button>
        <div class="modal-body">
          <iframe class="aspect-video w-full" src=""></iframe>
        </div>
      </div>
    </div>
  </div>

  <script>

const mySwiper = new Swiper('.swiper-container', {
  // Other options...
  autoplay: {
    delay: 15000, // Adjust this value to set the autoplay delay in milliseconds
  },
});

    // Select all elements with the attribute "data-toggle" set to "modal"
    const modalButtons: NodeListOf<HTMLElement> = document.querySelectorAll(
      "[data-toggle='modal']",
    );
    const body: HTMLElement = document.body; // Reference to the body element

    // Function to add a modal backdrop to the body
    const addModalBackdrop = (): void => {
      const backdrop: HTMLDivElement = document.createElement("div");
      backdrop.className = "modal-backdrop fade show";
      backdrop.id = "modalBackdrop";
      body.appendChild(backdrop);
    };

    // Function to get a modal element based on the provided target selector
    const getModal = (target: string): HTMLElement | null =>
      document.querySelector(target);

    // Function to show a modal when a corresponding button is clicked
    const showModal = (button: HTMLElement): void => {
      // Get the target modal ID from the button's data-target attribute
      const targetModalId: string = button.getAttribute("data-target") ?? "";
      const modal: HTMLElement | null = getModal(targetModalId);

      if (modal) {
        // Add a modal backdrop and update body styles
        addModalBackdrop();
        body.classList.add("modal-open");

        // Function to close the modal
        const closeModalHandler = (): void => closeModal(modal);
        document
          .querySelector(".modal-backdrop")
          ?.addEventListener("click", closeModalHandler);

        // Show the modal and set the iframe source if available
        modal.classList.add("show");
        const iframe: HTMLIFrameElement | null = modal.querySelector("iframe");
        if (iframe) {
          const dataSrc: string | null = button.getAttribute("data-src");
          iframe.src = dataSrc as string; // Type assertion
        }

        // Calculate scrollbar width and adjust body styles
        const scrollbarWidth: number =
          window.innerWidth - document.documentElement.clientWidth;
        body.style.overflow = "hidden";
        body.style.paddingRight = `${scrollbarWidth}px`;
        modal.style.paddingRight = `${scrollbarWidth}px`;

        // Attach click event handlers to modal close buttons
        const modalCloseBtns: NodeListOf<HTMLElement> =
          modal.querySelectorAll("[data-dismiss]");
        modalCloseBtns.forEach((btn) =>
          btn.addEventListener("click", closeModalHandler),
        );
      }
    };

    // Function to close the modal and remove the backdrop
    const closeModal = (modal: HTMLElement): void => {
      const modalBackdrop: HTMLElement | null =
        document.querySelector(".modal-backdrop");

      if (modal) {
        // Reset iframe src when the modal is closed
        const iframe: HTMLIFrameElement | null = modal.querySelector("iframe");
        if (iframe) iframe.src = "";

        // Hide the modal and reset body styles
        modal.classList.remove("show");
        body.style.overflow = "";
        body.style.paddingRight = "";
        modal.style.paddingRight = "";
        modalBackdrop && modalBackdrop.remove(); // Remove modal backdrop if exists
      }
    };

    // Attach click event handlers to all modal buttons
    modalButtons.forEach((button) => {
      button.addEventListener("click", () => showModal(button));
    });
  </script>
</Base>
